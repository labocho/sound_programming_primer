--- wave.h.bak	2021-08-19 22:03:14.000000000 +0900
+++ wave.h	2021-08-19 22:03:50.000000000 +0900
@@ -19,18 +19,18 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
   char data_chunk_ID[4];
-  long data_chunk_size;
+  int32_t data_chunk_size;
   unsigned char data;
   int n;
 
@@ -68,18 +68,18 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
   char data_chunk_ID[4];
-  long data_chunk_size;
+  int32_t data_chunk_size;
   double s;
   unsigned char data;
   int n;
@@ -158,18 +158,18 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
   char data_chunk_ID[4];
-  long data_chunk_size;
+  int32_t data_chunk_size;
   unsigned char data;
   int n;
 
@@ -211,18 +211,18 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
   char data_chunk_ID[4];
-  long data_chunk_size;
+  int32_t data_chunk_size;
   double sL;
   double sR;
   unsigned char data;
@@ -310,19 +310,19 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
   char data_chunk_ID[4];
-  long data_chunk_size;
-  short data;
+  int32_t data_chunk_size;
+  int16_t data;
   int n;
 
   fp = fopen(file_name, "rb");
@@ -359,20 +359,20 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
   char data_chunk_ID[4];
-  long data_chunk_size;
+  int32_t data_chunk_size;
   double s;
-  short data;
+  int16_t data;
   int n;
 
   riff_chunk_ID[0] = 'R';
@@ -432,7 +432,7 @@
       s = 0.0; /* クリッピング */
     }
 
-    data = (short)((int)(s + 0.5) - 32768); /* 四捨五入とオフセットの調節 */
+    data = (int16_t)((int)(s + 0.5) - 32768); /* 四捨五入とオフセットの調節 */
     fwrite(&data, 2, 1, fp); /* 音データの書き出し */
   }
 
@@ -443,19 +443,19 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
   char data_chunk_ID[4];
-  long data_chunk_size;
-  short data;
+  int32_t data_chunk_size;
+  int16_t data;
   int n;
 
   fp = fopen(file_name, "rb");
@@ -496,21 +496,21 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
   char data_chunk_ID[4];
-  long data_chunk_size;
+  int32_t data_chunk_size;
   double sL;
   double sR;
-  short data;
+  int16_t data;
   int n;
 
   riff_chunk_ID[0] = 'R';
@@ -570,7 +570,7 @@
       sL = 0.0; /* クリッピング */
     }
 
-    data = (short)((int)(sL + 0.5) - 32768); /* 四捨五入とオフセットの調節 */
+    data = (int16_t)((int)(sL + 0.5) - 32768); /* 四捨五入とオフセットの調節 */
     fwrite(&data, 2, 1, fp); /* 音データ（Lチャンネル）の書き出し */
 
     sR = (pcm->sR[n] + 1.0) / 2.0 * 65536.0;
@@ -584,7 +584,7 @@
       sR = 0.0; /* クリッピング */
     }
 
-    data = (short)((int)(sR + 0.5) - 32768); /* 四捨五入とオフセットの調節 */
+    data = (int16_t)((int)(sR + 0.5) - 32768); /* 四捨五入とオフセットの調節 */
     fwrite(&data, 2, 1, fp); /* 音データ（Rチャンネル）の書き出し */
   }
 
@@ -595,24 +595,24 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
-  short extra_size;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
+  int16_t extra_size;
   char fact_chunk_ID[4];
-  long fact_chunk_size;
-  long sample_length;
+  int32_t fact_chunk_size;
+  int32_t sample_length;
   char data_chunk_ID[4];
-  long data_chunk_size;
+  int32_t data_chunk_size;
 
-  short s; /* 16bitの音データ */
+  int16_t s; /* 16bitの音データ */
   unsigned char c; /* 8bitの圧縮データ */
   unsigned char sign, exponent, mantissa;
   int n, magnitude;
@@ -656,11 +656,11 @@
 
     if (sign == 0x80)
     {
-      s = -(short)magnitude;
+      s = -(int16_t)magnitude;
     }
     else
     {
-      s = (short)magnitude;
+      s = (int16_t)magnitude;
     }
 
     pcm->s[n] = (double)s / 32768.0; /* 音データを-1以上1未満の範囲に正規化する */
@@ -673,30 +673,30 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
-  short extra_size;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
+  int16_t extra_size;
   char fact_chunk_ID[4];
-  long fact_chunk_size;
-  long sample_length;
+  int32_t fact_chunk_size;
+  int32_t sample_length;
   char data_chunk_ID[4];
-  long data_chunk_size;
+  int32_t data_chunk_size;
 
   double x;
-  short s; /* 16bitの音データ */
+  int16_t s; /* 16bitの音データ */
   unsigned char c; /* 8bitの圧縮データ */
   unsigned char sign, exponent, mantissa;
   int n, magnitude;
 
-  static short level[8] =
+  static int16_t level[8] =
   {
     0x00FF, 0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF
   };
@@ -770,7 +770,7 @@
       x = 0.0; /* クリッピング */
     }
 
-    s = (short)((int)(x + 0.5) - 32768); /* 四捨五入とオフセットの調節 */
+    s = (int16_t)((int)(x + 0.5) - 32768); /* 四捨五入とオフセットの調節 */
 
     if (s < 0)
     {
@@ -817,24 +817,24 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
-  short extra_size;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
+  int16_t extra_size;
   char fact_chunk_ID[4];
-  long fact_chunk_size;
-  long sample_length;
+  int32_t fact_chunk_size;
+  int32_t sample_length;
   char data_chunk_ID[4];
-  long data_chunk_size;
+  int32_t data_chunk_size;
 
-  short s; /* 16bitの音データ */
+  int16_t s; /* 16bitの音データ */
   unsigned char c; /* 8bitの圧縮データ */
   unsigned char sign, exponent, mantissa;
   int n, magnitude;
@@ -885,11 +885,11 @@
 
     if (sign == 0x80)
     {
-      s = -(short)magnitude;
+      s = -(int16_t)magnitude;
     }
     else
     {
-      s = (short)magnitude;
+      s = (int16_t)magnitude;
     }
 
     pcm->s[n] = (double)s / 32768.0; /* 音データを-1以上1未満の範囲に正規化する */
@@ -902,25 +902,25 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
-  short extra_size;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
+  int16_t extra_size;
   char fact_chunk_ID[4];
-  long fact_chunk_size;
-  long sample_length;
+  int32_t fact_chunk_size;
+  int32_t sample_length;
   char data_chunk_ID[4];
-  long data_chunk_size;
+  int32_t data_chunk_size;
 
   double x;
-  short s; /* 16bitの音データ */
+  int16_t s; /* 16bitの音データ */
   unsigned char c; /* 8bitの圧縮データ */
   unsigned char sign, exponent, mantissa;
   int n, magnitude;
@@ -999,7 +999,7 @@
       x = 0.0; /* クリッピング */
     }
 
-    s = (short)((int)(x + 0.5) - 32768); /* 四捨五入とオフセットの調節 */
+    s = (int16_t)((int)(x + 0.5) - 32768); /* 四捨五入とオフセットの調節 */
 
     if (s < 0)
     {
@@ -1052,25 +1052,25 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
-  short extra_size;
-  short samples_per_block;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
+  int16_t extra_size;
+  int16_t samples_per_block;
   char fact_chunk_ID[4];
-  long fact_chunk_size;
-  long sample_length;
+  int32_t fact_chunk_size;
+  int32_t sample_length;
   char data_chunk_ID[4];
-  long data_chunk_size;
+  int32_t data_chunk_size;
 
-  short s; /* 16bitの音データ */
+  int16_t s; /* 16bitの音データ */
   unsigned char c; /* 4bitの圧縮データ */
   unsigned char header[4];
   unsigned char data;
@@ -1136,7 +1136,7 @@
       {
         fread(header, 1, 4, fp); /* ヘッダの読み取り */
 
-        sp = ((short)(char)header[1] << 8) + header[0];
+        sp = ((int16_t)(char)header[1] << 8) + header[0];
         index = header[2];
 
         s = sp;
@@ -1213,26 +1213,26 @@
 {
   FILE *fp;
   char riff_chunk_ID[4];
-  long riff_chunk_size;
+  int32_t riff_chunk_size;
   char file_format_type[4];
   char fmt_chunk_ID[4];
-  long fmt_chunk_size;
-  short wave_format_type;
-  short channel;
-  long samples_per_sec;
-  long bytes_per_sec;
-  short block_size;
-  short bits_per_sample;
-  short extra_size;
-  short samples_per_block;
+  int32_t fmt_chunk_size;
+  int16_t wave_format_type;
+  int16_t channel;
+  int32_t samples_per_sec;
+  int32_t bytes_per_sec;
+  int16_t block_size;
+  int16_t bits_per_sample;
+  int16_t extra_size;
+  int16_t samples_per_block;
   char fact_chunk_ID[4];
-  long fact_chunk_size;
-  long sample_length;
+  int32_t fact_chunk_size;
+  int32_t sample_length;
   char data_chunk_ID[4];
-  long data_chunk_size;
+  int32_t data_chunk_size;
 
   double x;
-  short s; /* 16bitの音データ */
+  int16_t s; /* 16bitの音データ */
   unsigned char c; /* 4bitの圧縮データ */
   unsigned char header[4];
   unsigned char data;
@@ -1282,7 +1282,7 @@
   wave_format_type = 17;
   channel = 1;
   samples_per_sec = pcm->fs; /* 標本化周波数 */
-  bytes_per_sec = (long)(block_size * samples_per_sec / samples_per_block);
+  bytes_per_sec = (int32_t)(block_size * samples_per_sec / samples_per_block);
   bits_per_sample = 4; /* 量子化精度 */
   extra_size = 2;
 
@@ -1337,7 +1337,7 @@
         x = 0.0; /* クリッピング */
       }
 
-      s = (short)((int)(x + 0.5) - 32768); /* 四捨五入とオフセットの調節 */
+      s = (int16_t)((int)(x + 0.5) - 32768); /* 四捨五入とオフセットの調節 */
 
       if (block == 0 && n == 0)
       {
